<!-- üí¨ Panel de soporte para administradores -->
<div class="container py-4">
  <div class="row">
    <div class="col-md-4 mb-3">
      <div class="list-group">
        <% clientes.forEach(function(c){ %>
          <a href="/chat?usuario=<%= c.id %>" class="list-group-item d-flex justify-content-between align-items-center <%= c.id == clienteId ? 'active text-white' : '' %>">
            <span><%= c.nombre %></span>
            <% if (c.pendientes > 0) { %>
              <span class="badge bg-danger rounded-pill"><%= c.pendientes %></span>
            <% } %>
          </a>
        <% }); %>
      </div>
    </div>
    <div class="col-md-8">
      <div class="card">
        <div class="card-header bg-primary text-white d-flex justify-content-between">
          <span>Soporte al Cliente</span>
          <span class="badge bg-success" id="statusIndicator">En l√≠nea</span>
        </div>
        <div class="card-body p-0">
          <div id="chat-container" class="p-3" style="height:400px;overflow-y:auto;background-color:#f8f9fa;">
            <% if (!clienteId || mensajes.length === 0) { %>
              <div class="text-center text-muted py-3">
                <i class="bi bi-chat-square-dots" style="font-size:2rem;"></i>
                <p class="mt-2">Selecciona un cliente para comenzar</p>
              </div>
            <% } else { %>
              <% mensajes.forEach(function(m){
                const own = m.emisor_rol === 'admin';
                const time = new Date(m.fecha).toLocaleTimeString('es-ES',{hour:'2-digit',minute:'2-digit'});
              %>
                <div class="mb-3">
                  <div class="<%= own ? 'chat-message own' : 'chat-message other' %>">
                    <div class="d-flex justify-content-between align-items-start">
                      <div>
                        <strong><%= m.emisor_rol === 'admin' ? 'Admin' : clientes.find(cl=>cl.id==clienteId).nombre %></strong>
                        <span class="badge bg-secondary ms-1"><%= m.emisor_rol %></span>
                      </div>
                      <small class="text-muted"><%= time %></small>
                    </div>
                    <div class="mt-1"><%= m.mensaje %></div>
                  </div>
                </div>
              <% }); %>
            <% } %>
          </div>
        </div>
        <div class="card-footer">
          <% if (clienteId) { %>
          <form id="chatForm" class="d-flex gap-2">
            <input type="text" id="messageInput" class="form-control" placeholder="Escribe tu mensaje" maxlength="500" autocomplete="off" required>
            <button type="submit" class="btn btn-primary" id="sendButton"><i class="bi bi-send"></i></button>
          </form>
          <% } else { %>
          <p class="text-muted mb-0">Selecciona un cliente para enviar mensajes</p>
          <% } %>
        </div>
      </div>
    </div>
  </div>
</div>

<script src="/socket.io/socket.io.js"></script>
<script>
const socket = io();
const chatContainer = document.getElementById('chat-container');
const chatForm = document.getElementById('chatForm');
const messageInput = document.getElementById('messageInput');
const statusIndicator = document.getElementById('statusIndicator');
const currentUser = { id: <%= usuario.id %>, nombre: '<%= usuario.nombre %>', rol: '<%= usuario.rol %>' };
const clienteActivo = <%= clienteId ? clienteId : 'null' %>;

if (chatForm) {
  chatForm.addEventListener('submit', (e)=>{
    e.preventDefault();
    const mensaje = messageInput.value.trim();
    if(!mensaje) return;
    socket.emit('mensaje', { usuarioId: clienteActivo, nombre: currentUser.nombre, mensaje: mensaje, rol: currentUser.rol });
    messageInput.value='';
    messageInput.focus();
  });
}

socket.on('mensaje', data => {
  addMessageToChat(data);
});

socket.on('connect', ()=>{
  statusIndicator.textContent = 'En l√≠nea';
  statusIndicator.className = 'badge bg-success';
  if(clienteActivo) socket.emit('joinRoom', { usuarioId: clienteActivo, rol: currentUser.rol });
});

socket.on('disconnect', ()=>{
  statusIndicator.textContent = 'Desconectado';
  statusIndicator.className = 'badge bg-danger';
});

function addMessageToChat(data){
  const div = document.createElement('div');
  div.className = 'mb-3';
  const isOwn = data.rol === currentUser.rol;
  const cls = isOwn ? 'chat-message own' : 'chat-message other';
  const timestamp = data.timestamp || new Date().toLocaleTimeString('es-ES',{hour:'2-digit',minute:'2-digit'});
  div.innerHTML = `
    <div class="${cls}">
      <div class="d-flex justify-content-between align-items-start">
        <div>
          <strong>${data.nombre}</strong>
          <span class="badge bg-secondary ms-1">${data.rol}</span>
        </div>
        <small class="text-muted">${timestamp}</small>
      </div>
      <div class="mt-1">${escapeHtml(data.mensaje)}</div>
    </div>
  `;
  chatContainer.appendChild(div);
  chatContainer.scrollTop = chatContainer.scrollHeight;
  const welcome = chatContainer.querySelector('.text-center');
  if(welcome) welcome.remove();
}

function escapeHtml(text){
  const div=document.createElement('div');
  div.textContent=text;
  return div.innerHTML;
}

if(messageInput) messageInput.focus();
</script>
